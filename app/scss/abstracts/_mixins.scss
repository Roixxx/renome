// Scss mixins
//https://github.com/Dolgik89/-media-screen
//https://habr.com/ru/post/352686/

/* 
@include media((
    padding: (desktop: 0, tabletWide: 0, tablet: 0, tabletSmall: 0, phablet: 0, phoneWide: 0, phone: 0, smallPhone: 0),
));
 */

$breakpoints: (
    "smallPhone":   320,
    "phone":        400,
    "phoneWide":   480,
    "phablet":      560,
    "tabletSmall": 640,
    "tablet":       768,
    "tabletWide":  1024,
    "desktop":      1248,
    "desktopWide": 1440
) !default;
$media-direction: max !default;

@mixin css_property($property, $value){
    @if type_of($value) == string{
        #{$property}: unquote($value);
    }@else{
        #{$property}: $value;
    }
}

@function splitScreens($string, $seperator){
    $string: inspect(quote($string));
    $sepId: str-index(quote($string), $seperator);
    @if($sepId){
        $array: (quote(str-slice($string, 0, $sepId - 1)), quote(str-slice($string, $sepId + 1)));
        @return $array;
    }@else{
        @return $string;
    }
}
//@media screen
@mixin media($properties, $orientation: false){

    @each $property, $value in $properties {
        @if type_of($value) == 'map' {
            @each $screen, $val in $value {
                $screen: splitScreens($screen, '-');
                @if type_of($screen) == 'list'{
                    $min_screen: nth($screen, 1);
                    $max_screen: nth($screen, 2);
                    @if $min_screen == min or $min_screen == max{
                        $media-direction: $min_screen;
                        @if $orientation {
                            @if map-has-key($breakpoints,  $max_screen){
                                @media only screen and (#{$media-direction}-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation){
                                    @include css_property($property, $val);
                                }
                            }@else{
                                @media only screen and (#{$media-direction}-width: $max_screen + 'px')  and (orientation: $orientation){
                                    @include css_property($property, $val);
                                }
                            }
                        } @else {
                            @if map-has-key($breakpoints,  $max_screen){
                                @media only screen and (#{$media-direction}-width: map-get($breakpoints, $max_screen) + 'px'){
                                    @include css_property($property, $val);
                                }
                            }@else{
                                @media only screen and (#{$media-direction}-width: $max_screen + 'px') {
                                    @include css_property($property, $val);
                                }
                            }
                        }
                    } @else {
                        @if $orientation {
                            @if map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen){
                                @media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation){
                                    @include css_property($property, $val);
                                }
                            } @else if map-has-key($breakpoints,  $min_screen) and not map-has-key($breakpoints,  $max_screen){
                                @media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: $max_screen + 'px') and (orientation: $orientation){
                                    @include css_property($property, $val);
                                }
                            } @else if not map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen){
                                @media only screen and (min-width: $min_screen + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation){
                                    @include css_property($property, $val);
                                }
                            } @else {
                                @media only screen and (min-width: $min_screen + 'px') and (max-width: $max_screen + 'px') and (orientation: $orientation){
                                    @include css_property($property, $val);
                                }
                            }
                        } @else {
                            @if map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen){
                                @media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px'){
                                    @include css_property($property, $val);
                                }
                            } @else if map-has-key($breakpoints,  $min_screen) and not map-has-key($breakpoints,  $max_screen){
                                @media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: $max_screen + 'px'){
                                    @include css_property($property, $val);
                                }
                            } @else if not map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen){
                                @media only screen and (min-width: $min_screen + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px'){
                                    @include css_property($property, $val);
                                }
                            } @else {
                                @media only screen and (min-width: $min_screen + 'px') and (max-width: $max_screen + 'px'){
                                    @include css_property($property, $val);
                                }
                            }
                        }
                    }
                }@else{
                    @if $screen == 'print' {
                        @media print{
                            @include css_property($property, $val);
                        }
                    } @else {
                        @if $orientation {
                            @if map-has-key($breakpoints, $screen){
                                @media only screen and (#{$media-direction}-width: map-get($breakpoints, $screen) + 'px') and (orientation: $orientation){
                                    @include css_property($property, $val);
                                }
                            } @else {
                                @if $screen == all {
                                    @media only screen and (orientation: $orientation) {
                                        @include css_property($property, $val);
                                    }
                                } @else {
                                    @media only screen and (#{$media-direction}-width: $screen + 'px') and (orientation: $orientation) {
                                        @include css_property($property, $val);
                                    }
                                }
                            }
                        } @else {
                            @if map-has-key($breakpoints, $screen){
                                @media only screen and (#{$media-direction}-width: map-get($breakpoints, $screen) + 'px'){
                                    @include css_property($property, $val);
                                }
                            } @else {
                                @if $screen == all {
                                    @include css_property($property, $val);
                                } @else {
                                    @media only screen and (#{$media-direction}-width: $screen + 'px'){
                                        @include css_property($property, $val);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } @else {
            @if $property == 'extend' {
                @extend #{unquote($value)} !optional;
            }@else {
                @include css_property($property, $value);
            }
        }
    }
};


@mixin btn-border-drawing($color: #ccc, $hover: black, $width: 2px, $vertical: top, $horizontal: left, $duration: 0.25s) {
  box-shadow: inset 0 0 0 $width $color;
  color: $color;
  transition: color $duration $duration/3;
  position: relative;
  
  &::before,
  &::after {
    border: 0 solid transparent;
    box-sizing: border-box;
    content: '';
    pointer-events: none;
    position: absolute;
    width: 0; height: 0;
    
    #{$vertical}: 0; 
    #{$horizontal}: 0;
  }

  &::before {
    $h-side: if($horizontal == 'left', 'right', 'left');
    
    border-#{$vertical}-width: $width;
    border-#{$h-side}-width: $width;
  }
  
  &::after {
    $v-side: if($vertical == 'top', 'bottom', 'top');
    
    border-#{$v-side}-width: $width;
    border-#{$horizontal}-width: $width;
  }
  
  &:hover {
    color: $hover;
    
    &::before,
    &::after {
      border-color: $hover;
      transition: border-color 0s, width $duration, height $duration;
      width: 100%;
      height: 100%;
    }
    
    &::before { transition-delay: 0s, 0s, $duration; }
    
    &::after { transition-delay: 0s, $duration, 0s; }
  }
}